// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package Network.Network


object SamplingServiceGrpc {
  val METHOD_SAMPLE_DATA_RESPONSE: _root_.io.grpc.MethodDescriptor[Network.Network.SampleDataMsg, Network.Network.SampleArrayMsg] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("Network.SamplingService", "SampleDataResponse"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[Network.Network.SampleDataMsg])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[Network.Network.SampleArrayMsg])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(Network.Network.NetworkProto.javaDescriptor.getServices().get(1).getMethods().get(0)))
      .build()
  
  val SERVICE: _root_.io.grpc.ServiceDescriptor =
    _root_.io.grpc.ServiceDescriptor.newBuilder("Network.SamplingService")
      .setSchemaDescriptor(new _root_.scalapb.grpc.ConcreteProtoFileDescriptorSupplier(Network.Network.NetworkProto.javaDescriptor))
      .addMethod(METHOD_SAMPLE_DATA_RESPONSE)
      .build()
  
  trait SamplingService extends _root_.scalapb.grpc.AbstractService {
    override def serviceCompanion = SamplingService
    def sampleDataResponse(request: Network.Network.SampleDataMsg): scala.concurrent.Future[Network.Network.SampleArrayMsg]
  }
  
  object SamplingService extends _root_.scalapb.grpc.ServiceCompanion[SamplingService] {
    implicit def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[SamplingService] = this
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = Network.Network.NetworkProto.javaDescriptor.getServices().get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.ServiceDescriptor = Network.Network.NetworkProto.scalaDescriptor.services(1)
    def bindService(serviceImpl: SamplingService, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition =
      _root_.io.grpc.ServerServiceDefinition.builder(SERVICE)
      .addMethod(
        METHOD_SAMPLE_DATA_RESPONSE,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[Network.Network.SampleDataMsg, Network.Network.SampleArrayMsg] {
          override def invoke(request: Network.Network.SampleDataMsg, observer: _root_.io.grpc.stub.StreamObserver[Network.Network.SampleArrayMsg]): _root_.scala.Unit =
            serviceImpl.sampleDataResponse(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .build()
  }
  
  trait SamplingServiceBlockingClient {
    def serviceCompanion = SamplingService
    def sampleDataResponse(request: Network.Network.SampleDataMsg): Network.Network.SampleArrayMsg
  }
  
  class SamplingServiceBlockingStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[SamplingServiceBlockingStub](channel, options) with SamplingServiceBlockingClient {
    override def sampleDataResponse(request: Network.Network.SampleDataMsg): Network.Network.SampleArrayMsg = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_SAMPLE_DATA_RESPONSE, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): SamplingServiceBlockingStub = new SamplingServiceBlockingStub(channel, options)
  }
  
  class SamplingServiceStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[SamplingServiceStub](channel, options) with SamplingService {
    override def sampleDataResponse(request: Network.Network.SampleDataMsg): scala.concurrent.Future[Network.Network.SampleArrayMsg] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_SAMPLE_DATA_RESPONSE, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): SamplingServiceStub = new SamplingServiceStub(channel, options)
  }
  
  object SamplingServiceStub extends _root_.io.grpc.stub.AbstractStub.StubFactory[SamplingServiceStub] {
    override def newStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): SamplingServiceStub = new SamplingServiceStub(channel, options)
    
    implicit val stubFactory: _root_.io.grpc.stub.AbstractStub.StubFactory[SamplingServiceStub] = this
  }
  
  def bindService(serviceImpl: SamplingService, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition = SamplingService.bindService(serviceImpl, executionContext)
  
  def blockingStub(channel: _root_.io.grpc.Channel): SamplingServiceBlockingStub = new SamplingServiceBlockingStub(channel)
  
  def stub(channel: _root_.io.grpc.Channel): SamplingServiceStub = new SamplingServiceStub(channel)
  
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = Network.Network.NetworkProto.javaDescriptor.getServices().get(1)
  
}