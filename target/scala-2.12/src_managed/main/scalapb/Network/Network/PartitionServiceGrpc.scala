// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package Network.Network


object PartitionServiceGrpc {
  val METHOD_REQUEST_PARTITION: _root_.io.grpc.MethodDescriptor[Network.Network.PartitionRequestMsg, Network.Network.ResponseMsg] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("Network.PartitionService", "RequestPartition"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[Network.Network.PartitionRequestMsg])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[Network.Network.ResponseMsg])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(Network.Network.NetworkProto.javaDescriptor.getServices().get(2).getMethods().get(0)))
      .build()
  
  val METHOD_TERMINATE_PARTITION: _root_.io.grpc.MethodDescriptor[Network.Network.ReportMsg, Network.Network.ResponseMsg] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("Network.PartitionService", "TerminatePartition"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[Network.Network.ReportMsg])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[Network.Network.ResponseMsg])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(Network.Network.NetworkProto.javaDescriptor.getServices().get(2).getMethods().get(1)))
      .build()
  
  val SERVICE: _root_.io.grpc.ServiceDescriptor =
    _root_.io.grpc.ServiceDescriptor.newBuilder("Network.PartitionService")
      .setSchemaDescriptor(new _root_.scalapb.grpc.ConcreteProtoFileDescriptorSupplier(Network.Network.NetworkProto.javaDescriptor))
      .addMethod(METHOD_REQUEST_PARTITION)
      .addMethod(METHOD_TERMINATE_PARTITION)
      .build()
  
  trait PartitionService extends _root_.scalapb.grpc.AbstractService {
    override def serviceCompanion = PartitionService
    def requestPartition(request: Network.Network.PartitionRequestMsg): scala.concurrent.Future[Network.Network.ResponseMsg]
    def terminatePartition(request: Network.Network.ReportMsg): scala.concurrent.Future[Network.Network.ResponseMsg]
  }
  
  object PartitionService extends _root_.scalapb.grpc.ServiceCompanion[PartitionService] {
    implicit def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[PartitionService] = this
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = Network.Network.NetworkProto.javaDescriptor.getServices().get(2)
    def scalaDescriptor: _root_.scalapb.descriptors.ServiceDescriptor = Network.Network.NetworkProto.scalaDescriptor.services(2)
    def bindService(serviceImpl: PartitionService, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition =
      _root_.io.grpc.ServerServiceDefinition.builder(SERVICE)
      .addMethod(
        METHOD_REQUEST_PARTITION,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[Network.Network.PartitionRequestMsg, Network.Network.ResponseMsg] {
          override def invoke(request: Network.Network.PartitionRequestMsg, observer: _root_.io.grpc.stub.StreamObserver[Network.Network.ResponseMsg]): _root_.scala.Unit =
            serviceImpl.requestPartition(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .addMethod(
        METHOD_TERMINATE_PARTITION,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[Network.Network.ReportMsg, Network.Network.ResponseMsg] {
          override def invoke(request: Network.Network.ReportMsg, observer: _root_.io.grpc.stub.StreamObserver[Network.Network.ResponseMsg]): _root_.scala.Unit =
            serviceImpl.terminatePartition(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .build()
  }
  
  trait PartitionServiceBlockingClient {
    def serviceCompanion = PartitionService
    def requestPartition(request: Network.Network.PartitionRequestMsg): Network.Network.ResponseMsg
    def terminatePartition(request: Network.Network.ReportMsg): Network.Network.ResponseMsg
  }
  
  class PartitionServiceBlockingStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[PartitionServiceBlockingStub](channel, options) with PartitionServiceBlockingClient {
    override def requestPartition(request: Network.Network.PartitionRequestMsg): Network.Network.ResponseMsg = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_REQUEST_PARTITION, options, request)
    }
    
    override def terminatePartition(request: Network.Network.ReportMsg): Network.Network.ResponseMsg = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_TERMINATE_PARTITION, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): PartitionServiceBlockingStub = new PartitionServiceBlockingStub(channel, options)
  }
  
  class PartitionServiceStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[PartitionServiceStub](channel, options) with PartitionService {
    override def requestPartition(request: Network.Network.PartitionRequestMsg): scala.concurrent.Future[Network.Network.ResponseMsg] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_REQUEST_PARTITION, options, request)
    }
    
    override def terminatePartition(request: Network.Network.ReportMsg): scala.concurrent.Future[Network.Network.ResponseMsg] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_TERMINATE_PARTITION, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): PartitionServiceStub = new PartitionServiceStub(channel, options)
  }
  
  object PartitionServiceStub extends _root_.io.grpc.stub.AbstractStub.StubFactory[PartitionServiceStub] {
    override def newStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): PartitionServiceStub = new PartitionServiceStub(channel, options)
    
    implicit val stubFactory: _root_.io.grpc.stub.AbstractStub.StubFactory[PartitionServiceStub] = this
  }
  
  def bindService(serviceImpl: PartitionService, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition = PartitionService.bindService(serviceImpl, executionContext)
  
  def blockingStub(channel: _root_.io.grpc.Channel): PartitionServiceBlockingStub = new PartitionServiceBlockingStub(channel)
  
  def stub(channel: _root_.io.grpc.Channel): PartitionServiceStub = new PartitionServiceStub(channel)
  
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = Network.Network.NetworkProto.javaDescriptor.getServices().get(2)
  
}